import React from 'react';
import './AboutPage.css'; // 追加されたCSSファイルをインポート

export default function AboutPage() {
  return (
    <div className="about-container">
      <h1>会社概要</h1>
      
      <section className="basic-info">
        <h2>基本情報</h2>
        <table>
          <tbody>
            <tr>
              <td>設立年度</td>
              <td>2000年</td>
            </tr>
            <tr>
              <td>住所</td>
              <td>1234 会社ストリート, シティー名, 国名</td>
            </tr>
            <tr>
              <td>Email</td>
              <td>info@company.com</td>
            </tr>
            <tr>
              <td>電話</td>
              <td>123-456-7890</td>
            </tr>
          </tbody>
        </table>
      </section>

      <section className="team-members">
        <h2>チームメンバー</h2>
        <ul>
          <li>山田 太郎 - CEO</li>
          <li>鈴木 花子 - マーケティングディレクター</li>
          <li>田中 一郎 - チーフエンジニア</li>
          {/* 他のメンバー */}
        </ul>
      </section>
    </div>
  );
}
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './Header';
import TitlePage from './TitlePage';
import PersonalInfoForm from './PersonalInfoForm';
import ConfirmationPage from './ConfirmationPage';
import DonePage from './DonePage';
import AboutPage from './AboutPage';
import HomePage from './HomePage'; // HomePage コンポーネントをインポート
import SignUpPage from './SignUpPage'; // SignUpPage コンポーネントをインポート
import LoginPage from './LoginPage'; // LoginPage コンポーネントをインポート
import Letter from './Letter.js';

function App() {
  return (
    <Router>
      <Header />
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/title" element={<TitlePage />} />
        <Route path="/personal-info" element={<PersonalInfoForm />} />
        <Route path="/confirm" element={<ConfirmationPage />} /> {/* この行が重要 */}
        <Route path="/done" element={<DonePage />} />
        <Route path="/about" element={<AboutPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/letter" element={<Letter />} />
      </Routes>
    </Router>
  );
}


export default App;import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

type UserInfo = {
    username: string;
    email: string;
};

type LetterInfo = {
    content: string;
};

type RecipientInfo = {
    name: string;
    address: string;
    phoneNumber: string;
    email: string;
    postalCode: string;
    sendDate: string;
};

export default function ConfirmationPage() {
    const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
    const [letterInfo, setLetterInfo] = useState<LetterInfo | null>(null);
    const [recipientInfo, setRecipientInfo] = useState<RecipientInfo | null>(null);
    const navigate = useNavigate();

    useEffect(() => {
        // APIからデータを取得する関数
        const fetchData = async () => {
            try {
                const response = await fetch('http://localhost:8080/api/confirmation', {
                    method: 'GET',
                    credentials: 'include', // Cookieを送信する
                });
                if (response.ok) {
                    const data = await response.json();
                    setUserInfo(data.userInfo);
                    setLetterInfo(data.letterInfo);
                    setRecipientInfo(data.recipientInfo);
                } else {
                    throw new Error('データの取得に失敗しました。');
                }
            } catch (error) {
                console.error('エラー:', error);
            }
        };

        fetchData();
    }, []);

    return (
        <div>
            <h2>送り主の情報</h2>
            {userInfo && (
                <div>
                    <p>ユーザー名: {userInfo.username}</p>
                    <p>メール: {userInfo.email}</p>
                </div>
            )}

            <h2>手紙の内容</h2>
            {letterInfo && <p>{letterInfo.content}</p>}

            <h2>送り先の情報</h2>
            {recipientInfo && (
                <div>
                    <p>名前: {recipientInfo.name}</p>
                    <p>住所: {recipientInfo.address}</p>
                    <p>電話番号: {recipientInfo.phoneNumber}</p>
                    <p>メール: {recipientInfo.email}</p>
                    <p>郵便番号: {recipientInfo.postalCode}</p>
                    <p>送信日: {recipientInfo.sendDate}</p>
                </div>
            )}

            <button onClick={() => navigate('/done')}>完了</button>
        </div>
    );
}
import React from 'react';

export default function DonePage() {
  return (
    <div className="page-container">
      <h1>done</h1>
    </div>
  );
}
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

export default function Header() {
  const [isOpen, setIsOpen] = useState(false);
  const navigate = useNavigate();

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

const handleLogout = () => {
  console.log("Logout button clicked");
  // サーバーにログアウトリクエストを送信
  fetch('http://localhost:8080/api/logout', {
    method: 'POST',
    credentials: 'include', // Cookieを含めるために必要
  })
  .then(response => {
    if (response.ok) {
      // クッキーからトークンを削除
      document.cookie = 'token=; Max-Age=0; path=/;';
      // メニューを閉じる
      setIsOpen(false);
      // ホームページにリダイレクト
      navigate('/');
    } else {
      throw new Error('Logout failed');
    }
  })
  .catch(error => {
    console.error('Logout error:', error);
  });
};

  return (
    <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '10px' }}>
      <div className="logo">
        <Link to="/" className="header-link">
          <span className="app-name">My App</span>
        </Link>
      </div>
      <hr className="header-line" />
      <div className="hamburger-menu" onClick={toggleMenu} style={{ cursor: 'pointer', fontSize: '36px' }}>
        ☰
      </div>
      {isOpen && (
        <nav style={{ position: 'absolute', top: '60px', right: '10px', backgroundColor: 'white', border: '1px solid #ddd', padding: '3px', fontSize: '18px' }}>
          <ul style={{ listStyle: 'none', padding: 0 }}>
            <li><Link to="/" onClick={toggleMenu}>ホーム</Link></li>
            <li><Link to="/about" onClick={toggleMenu}>会社概要</Link></li>
            <li>
              <button onClick={handleLogout} style={{ background: 'none', border: 'none', padding: 0, margin: 0, textDecoration: 'underline', cursor: 'pointer', color: 'darkslategray' }}>
                ログアウト
              </button>
            </li>
          </ul>
        </nav>
      )}
    </header>
  );
}import React from 'react';
import { useNavigate } from 'react-router-dom';

export default function HomePage() {
  const navigate = useNavigate();

  // Cookieからトークンを取得する関数
  const getTokenFromCookie = () => {
    const allCookies = document.cookie.split(';');
    for (let cookie of allCookies) {
      const [key, value] = cookie.trim().split('=');
      if (key === 'token') return value;
    }
    return null;
  };

  // ログインボタンのハンドラー
  const handleLogin = () => {
    // トークンがCookieにあるかチェック
    if (getTokenFromCookie()) {
      navigate('/title');
    } else {
      navigate('/login');
    }
  };

  return (
    <div className="page-container">
      <h1>ホームページ</h1>
      <button onClick={() => navigate('/signup')}>アカウント作成</button>
      <button onClick={handleLogin}>ログイン</button>
    </div>
  );
}
import React, { useState, FormEvent } from 'react';
import { useNavigate } from 'react-router-dom';

export default function LoginPage() {
  const navigate = useNavigate();

  // メールアドレスとパスワードの状態を管理
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  // フォーム送信時のイベントハンドラー
  const handleLogin = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    try {
      const response = await fetch('http://localhost:8080/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || 'Login failed');
      }

      navigate('/title'); // ログインに成功したら別のページにリダイレクト
    } catch (error) {
      if (error instanceof Error) {
        setErrorMessage(error.message);
      } else {
        setErrorMessage('予期せぬエラーが発生しました。');
      }
    }
  };

  return (
    <div className="form-container">
      <h1>ログイン</h1>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="メールアドレス"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="パスワード"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">ログイン</button>
      </form>
    </div>
  );
}
import React from "react";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import './App.css';

type FormData = {
  recipientName: string;
  recipientZip: string;
  recipientAddress: string;
  recipientEmail: string;
  cardName: string;
  cardNumber: string;
  expiryMonth: string;
  expiryYear: string;
  cvc: string;
};

export default function PersonalInfoForm() {
  const navigate = useNavigate();
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>();

  const onSubmit = (data: FormData) => {
    // ローカルストレージから送信日を取得
    const sendDate = localStorage.getItem("sendDate");

    const completeData = { ...data, sendDate }; // 送信する完全なデータ

    // POSTリクエストのオプションを設定
    const requestOptions: RequestInit = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(completeData),
      credentials: 'include' // TypeScriptの型エラーを回避
    };

    fetch('http://localhost:8080/api/personal-info', requestOptions)
    .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        navigate('/confirm'); // フォームの送信後、完了ページに遷移
      })
      .catch(error => console.error('Error:', error));
  };

  return (
    <div className="form-container">
      <form onSubmit={handleSubmit(onSubmit)}>
        <fieldset>
          <legend>送り先の個人情報</legend>
          <div className="form-group">
            <input {...register("recipientName", { required: "相手の名前は必須です" })} placeholder="相手の名前" />
            {errors.recipientName && <p className="form-error">{errors.recipientName.message}</p>}
          </div>
          <div className="form-group">
            <input {...register("recipientZip", { required: "相手の郵便番号は必須です" })} placeholder="相手の郵便番号" />
            {errors.recipientZip && <p className="form-error">{errors.recipientZip.message}</p>}
          </div>
          <div className="form-group">
            <input {...register("recipientAddress", { required: "相手の住所は必須です" })} placeholder="相手の住所" />
            {errors.recipientAddress && <p className="form-error">{errors.recipientAddress.message}</p>}
          </div>
          <div className="form-group">
            <input {...register("recipientEmail", { required: "相手のメールアドレスは必須です", pattern: { value: /^\S+@\S+$/i, message: "有効なメールアドレスを入力してください" } })} placeholder="相手のメールアドレス" />
            {errors.recipientEmail && <p className="form-error">{errors.recipientEmail.message}</p>}
          </div>
        </fieldset>

        <fieldset>
          <legend>決済情報</legend>
          <div className="form-group">
            <input {...register("cardName", { required: "カード名義人は必須です" })} placeholder="カード名義人" />
            {errors.cardName && <p className="form-error">{errors.cardName.message}</p>}
          </div>
          <div className="form-group">
            <input {...register("cardNumber", { required: "カード番号は必須です" })} placeholder="カード番号" />
            {errors.cardNumber && <p className="form-error">{errors.cardNumber.message}</p>}
          </div>
          <div className="form-group">
            <select {...register("expiryMonth", { required: "有効期限の月は必須です" })}>
              <option value="">月</option>
              {Array.from({ length: 12 }, (_, i) => <option key={i} value={i + 1}>{i + 1}</option>)}
            </select>
            {errors.expiryMonth && <p className="form-error">{errors.expiryMonth.message}</p>}
          </div>
          <div className="form-group">
            <select {...register("expiryYear", { required: "有効期限の年は必須です" })}>
              <option value="">年</option>
              {Array.from({ length: 10 }, (_, i) => <option key={i} value={new Date().getFullYear() + i}>{new Date().getFullYear() + i}</option>)}
            </select>
            {errors.expiryYear && <p className="form-error">{errors.expiryYear.message}</p>}
          </div>
          <div className="form-group">
            <input {...register("cvc", { required: "CVCは必須です" })} placeholder="CVC" />
            {errors.cvc && <p className="form-error">{errors.cvc.message}</p>}
          </div>
        </fieldset>

        <button type="submit">送信</button>
      </form>
    </div>
  );
}
import React, { useState, FormEvent } from 'react';
import { useNavigate } from 'react-router-dom';

interface SignUpFormData {
  email: string;
  name: string;
  address: string;
  password: string;
}

export default function SignUpPage() {
  const [formData, setFormData] = useState<SignUpFormData>({
    email: '',
    name: '',
    address: '',
    password: '',
  });

  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [event.target.name]: event.target.value });
  };

    const validatePassword = (password: string) => {
    if (password.length < 8 || !/\d/.test(password) || !/[a-zA-Z]/.test(password)) {
      return false;
    }
    return true;
  };

  const handleSignUp = async (event: FormEvent) => {
    event.preventDefault();  // フォームのデフォルト送信動作を防止

    if (!validatePassword(formData.password)) {
      setError('パスワードは8文字以上で、数字と文字を含む必要があります。');
      return;
    }

    try {
      const response = await fetch('http://localhost:8080/api/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),  // フォームデータをJSONに変換して送信
      });

      if (!response.ok) {
        throw new Error('サインアップに失敗しました');
      }

      navigate('/'); // サインアップ成功後のページへ移動
    } catch (error) {
      console.error('サインアップエラー:', error);
      setError(error instanceof Error ? error.message : 'エラーが発生しました'); // エラーメッセージをセット
    }
  };

  return (
    <div className="form-container">
      <h1>アカウント作成</h1>
      {error && <div className="error-message">{error}</div>} {/* エラーメッセージを表示 */}
      <form onSubmit={handleSignUp}>
        <input
          type="email"
          name="email"
          placeholder="メールアドレス"
          value={formData.email}
          onChange={handleChange}
        />
        <input
          type="text"
          name="name"
          placeholder="氏名"
          value={formData.name}
          onChange={handleChange}
        />
        <input
          type="text"
          name="address"
          placeholder="住所"
          value={formData.address}
          onChange={handleChange}
        />
        <input
          type="password"
          name="password"
          placeholder="パスワード"
          value={formData.password}
          onChange={handleChange}
        />
        <button type="submit">アカウント作成</button>
      </form>
    </div>
  );
}
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

export default function TitlePage() {
  const navigate = useNavigate();
  const [userName, setUserName] = useState('');

  useEffect(() => {
    // サーバーからユーザー名を取得する関数
    const fetchUserName = async () => {
      try {
        const response = await fetch('http://localhost:8080/api/user/name', {
          method: 'GET',
          credentials: 'include', // Cookieを送信する
          headers: {
            'Content-Type': 'application/json'
          }
        });
        if (response.ok) {
          const data = await response.json();
          setUserName(data.name); // ユーザー名を状態にセット
          console.log(data.name);
        } else {
          throw new Error('ユーザー名の取得に失敗しました。');
        }
      } catch (error) {
        console.error('エラー:', error);
      }
    };
    

    fetchUserName();
  }, []);

  return (
    <div className="page-container">
      <h1>ようこそ、{userName}さん！</h1>
      <button onClick={() => navigate('/Letter')}>手紙を書く</button>
    </div>
  );
}
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Letter.css';
import Font from "./compornents/Font.js"
import Sent from "./compornents/Sent.js"
import Text from "./compornents/Text.js"

const Letter = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [text, setText] = useState("");
  const [fontSize, setFontSize] = useState("16px");
  const [file, setFile] = useState(null);
  const [fileUploaded, setFileUploaded] = useState(false);
  const [sendDate, setSendDate] = useState(""); // 送信日付の状態を追加
  const navigate = useNavigate();

  const handleClick = () => {
    setIsOpen(true);
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    setFile(selectedFile);
    setFileUploaded(true);
  };

  const handleSaveDraft = () => {
    saveLetterToServer();
    localStorage.setItem("sendDate", sendDate); // 送信日付をローカルストレージに保存
    navigate('/personal-info');
  };

  const saveLetterToServer = () => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('content', text);
    const fontSizeValue = parseInt(fontSize.replace('px', ''), 10);
    formData.append('fontSize', fontSizeValue);

    const requestOptions = {
      method: 'POST',
      body: formData,
      credentials: 'include',
    };

    fetch('http://localhost:8080/api/letter', requestOptions)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        alert('下書きが保存されました！');
      })
      .catch(error => {
        console.error('Error:', error);
        alert('保存に失敗しました。');
      });
  };

  return (
    <>
      {!isOpen && (
        <div className="letter" onClick={handleClick}>
          {/* 手紙の表面の内容 */}
        </div>
      )}
      {isOpen && (
        <div>
          <Font fontState={[fontSize, setFontSize]} />
          <Text fontState={[fontSize, setFontSize]} textState={[text, setText]} />
          
          <div>
            <input type="file" onChange={handleFileChange} />
            {fileUploaded && <div>ファイルがアップロードされました。</div>}
          </div>

          <div>
            <label>送信日付:</label>
            <input
              type="date"
              value={sendDate}
              onChange={(e) => setSendDate(e.target.value)}
            />
          </div>

          <div className="save-draft-button-container">
            <button onClick={handleSaveDraft} className="save-draft-button">
              下書き完了
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default Letter;
